[ignore]
; We fork some components by platform
.*/*[.]android.js

; Ignore templates for 'react-native init'
.*/local-cli/templates/.*

; Ignore the Dangerfile
<PROJECT_ROOT>/bots/dangerfile.js

; Ignore "BUCK" generated dirs
<PROJECT_ROOT>/\.buckd/

; Ignore unexpected extra "@providesModule"
.*/node_modules/.*/node_modules/fbjs/.*

; Ignore duplicate module providers
; For RN Apps installed via npm, "Libraries" folder is inside
; "node_modules/react-native" but in the source repo it is in the root
.*/Libraries/react-native/React.js

; Ignore polyfills
.*/Libraries/polyfills/.*

; Ignore metro
.*/node_modules/metro/.*

; Ignore git history
.*/.history

; These should not be required directly
; require from fbjs/lib instead: require('fbjs/lib/invariant')
.*/node_modules/invariant/.*
.*/node_modules/warning/.*

[include]

[libs]
Libraries/react-native/react-native-interface.js
flow/
flow-github/

[options]
emoji=true

module.system=haste
module.system.haste.use_name_reducers=true
# keep the following in sync with server/haste/hasteImpl.js
# get basename
module.system.haste.name_reducers='^.*/\([a-zA-Z0-9$_.-]+\.js\(\.flow\)?\)$' -> '\1'
# strip .js or .js.flow suffix
module.system.haste.name_reducers='^\(.*\)\.js\(\.flow\)?$' -> '\1'
# strip .ios suffix
module.system.haste.name_reducers='^\(.*\)\.ios$' -> '\1'
module.system.haste.name_reducers='^\(.*\)\.android$' -> '\1'
module.system.haste.name_reducers='^\(.*\)\.native$' -> '\1'
module.system.haste.paths.blacklist=.*/__tests__/.*
module.system.haste.paths.blacklist=.*/__mocks__/.*
module.system.haste.paths.blacklist=<PROJECT_ROOT>/Libraries/Animated/src/polyfills/.*
module.system.haste.paths.whitelist=<PROJECT_ROOT>/Libraries/.*
module.system.haste.paths.whitelist=<PROJECT_ROOT>/RNTester/.*
module.system.haste.paths.whitelist=<PROJECT_ROOT>/IntegrationTests/.*
module.system.haste.paths.blacklist=<PROJECT_ROOT>/Libraries/Animated/src/polyfills/.*

munge_underscores=true

module.name_mapper='^[./a-zA-Z0-9$_-]+\.\(bmp\|gif\|jpg\|jpeg\|png\|psd\|svg\|webp\|m4v\|mov\|mp4\|mpeg\|mpg\|webm\|aac\|aiff\|caf\|m4a\|mp3\|wav\|html\|pdf\)$' -> 'RelativeImageStub'

module.name_mapper='^@gringo/account/\(.*\)$' -> '<PROJECT_ROOT>/src/features/account/\1'
module.name_mapper='^@gringo/channels/\(.*\)$' -> '<PROJECT_ROOT>/src/features/channels/\1'
module.name_mapper='^@gringo/api/\(.*\)$' -> '<PROJECT_ROOT>/src/features/api/\1'
module.name_mapper='^@gringo/auth/\(.*\)$' -> '<PROJECT_ROOT>/src/features/auth/\1'
module.name_mapper='^@gringo/components/\(.*\)$' -> '<PROJECT_ROOT>/src/components/\1'
module.name_mapper='^@gringo/feed/\(.*\)$' -> '<PROJECT_ROOT>/src/features/feed/\1'
module.name_mapper='^@gringo/flags/\(.*\)$' -> '<PROJECT_ROOT>/src/features/flags/\1'
module.name_mapper='^@gringo/timeline/\(.*\)$' -> '<PROJECT_ROOT>/src/features/timeline/\1'
module.name_mapper='^@gringo/navigation/\(.*\)$' -> '<PROJECT_ROOT>/src/navigation/\1'
module.name_mapper='^@gringo/reducers/\(.*\)$' -> '<PROJECT_ROOT>/src/reducers/\1'
module.name_mapper='^@gringo/sagas/\(.*\)$' -> '<PROJECT_ROOT>/src/sagas/\1'
module.name_mapper='^@gringo/settings/\(.*\)$' -> '<PROJECT_ROOT>/src/features/settings/\1'
module.name_mapper='^@gringo/src_assets/\(.*\)$' -> '<PROJECT_ROOT>/src/assets/\1'
module.name_mapper='^@gringo/splash/\(.*\)$' -> '<PROJECT_ROOT>/src/features/splash/\1'
module.name_mapper='^@gringo/store/\(.*\)$' -> '<PROJECT_ROOT>/src/channel/store/\1'
module.name_mapper='^@gringo/styles/\(.*\)$' -> '<PROJECT_ROOT>/src/styles/\1'
module.name_mapper='^@gringo/types/\(.*\)$' -> '<PROJECT_ROOT>/src/types/\1'


suppress_type=$FlowIssue
suppress_type=$FlowFixMe
suppress_type=$FlowFixMeProps
suppress_type=$FlowFixMeState

suppress_comment=\\(.\\|\n\\)*\\$FlowFixMe\\($\\|[^(]\\|(\\(<VERSION>\\)? *\\(site=[a-z,_]*[react_native_oss|react_native_fb][a-z,_]*\\)?)\\)
suppress_comment=\\(.\\|\n\\)*\\$FlowIssue\\((\\(<VERSION>\\)? *\\(site=[a-z,_]*[react_native_oss|react_native_fb][a-z,_]*\\)?)\\)?:? #[0-9]+
suppress_comment=\\(.\\|\n\\)*\\$FlowFixedInNextDeploy
suppress_comment=\\(.\\|\n\\)*\\$FlowExpectedError

[lints]
all=warn

# There is an ESLint rule for this
unclear-type=off

sketchy-null=off
sketchy-null-number=warn
sketchy-null-mixed=warn

# This is noisy for now. We *do* still want to warn on importing types
# from untyped files, which is covered by untyped-type-import
untyped-import=off

[strict]
deprecated-type
nonstrict-import
sketchy-null
unclear-type
unsafe-getters-setters
untyped-import
untyped-type-import

[version]
^0.81.0